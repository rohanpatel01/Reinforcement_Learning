Starting Training
layer weights:  Parameter containing:
tensor([[ 0.0476, -0.0424,  0.1807, -0.0296,  0.0336, -0.1216, -0.0121,  0.0620,
          0.0851, -0.0085,  0.0114,  0.1252, -0.1220,  0.1076,  0.1146,  0.1499,
         -0.0149, -0.1245, -0.1753, -0.0095, -0.0941,  0.0116,  0.0792,  0.0545,
          0.0102],
        [-0.0838,  0.1132,  0.1347, -0.1698,  0.0855, -0.1745, -0.0274, -0.0647,
         -0.1395,  0.0013, -0.1385,  0.1610,  0.1535, -0.0860, -0.1402, -0.0395,
         -0.1870, -0.0290,  0.0208,  0.0290, -0.0315, -0.1585,  0.1433,  0.0066,
         -0.0463],
        [ 0.0293,  0.0035,  0.0786,  0.0580, -0.1662,  0.0892, -0.1263,  0.0148,
          0.0484,  0.0305,  0.1819,  0.1817,  0.1460,  0.1773,  0.1629,  0.0629,
         -0.0523,  0.0804, -0.0995,  0.1184,  0.0553, -0.0345,  0.0307,  0.1750,
          0.1179],
        [-0.1753, -0.0437,  0.0524, -0.1361, -0.1234, -0.1873, -0.0824, -0.0891,
         -0.1971, -0.1444,  0.0623, -0.0475,  0.1584, -0.0463,  0.0870,  0.1474,
          0.1015,  0.0768, -0.0732, -0.0822,  0.1267,  0.1456,  0.0916,  0.1492,
         -0.0953],
        [-0.1487, -0.1837,  0.0264,  0.1855, -0.0232,  0.1833,  0.0802, -0.1770,
          0.0768,  0.0694,  0.1043, -0.0784,  0.1690, -0.1508, -0.1584,  0.0597,
         -0.0789,  0.0697, -0.0770, -0.0049,  0.0779, -0.1286, -0.0226, -0.1277,
          0.1736]], dtype=torch.float64, requires_grad=True)
layer weights:  Parameter containing:
tensor([[-0.0980, -0.1690,  0.1730,  0.0758,  0.0580, -0.1661,  0.0341, -0.0427,
          0.0619, -0.1495, -0.1887,  0.0014, -0.0226,  0.0152,  0.0447, -0.1691,
          0.1260,  0.1878,  0.1548,  0.0369, -0.0733, -0.1572,  0.1954,  0.0030,
          0.1038],
        [ 0.1083, -0.0438, -0.1605,  0.0190, -0.0149,  0.0110, -0.1678,  0.1119,
         -0.0288, -0.1373, -0.1661,  0.1068,  0.1801, -0.1524, -0.0560, -0.1166,
         -0.0785, -0.1854, -0.0640, -0.1786, -0.0932, -0.0588, -0.1823,  0.1084,
         -0.0478],
        [-0.0495,  0.0900, -0.1474, -0.0431,  0.1666, -0.1931,  0.1498, -0.1740,
         -0.0486, -0.0123,  0.0026,  0.0952, -0.0173, -0.0628,  0.1156, -0.0338,
         -0.0164, -0.1225,  0.0586,  0.1727,  0.1959, -0.1326,  0.1507, -0.0710,
          0.0027],
        [-0.0353, -0.0672,  0.1060,  0.1355, -0.1375, -0.1853, -0.0630, -0.1858,
         -0.0575, -0.0191, -0.1767,  0.0248, -0.0132, -0.1124, -0.1451,  0.0500,
         -0.0239, -0.0416,  0.0487,  0.1692, -0.1590, -0.1454,  0.1030, -0.0091,
          0.1684],
        [ 0.1540, -0.0126,  0.0979,  0.0992,  0.1309, -0.0880, -0.1138,  0.0635,
         -0.0507, -0.1782,  0.0390, -0.1892, -0.1101,  0.1022, -0.0136,  0.0973,
         -0.1136, -0.0134, -0.0011,  0.0454,  0.1561,  0.1394,  0.1032, -0.0345,
         -0.0069]], dtype=torch.float64, requires_grad=True)
Summary AFTER training

==============================================
Summary: 
State	Action	Next State	Reward
0 		 0 		  Q(s,a)=  tensor(2.9898, dtype=torch.float64, grad_fn=<SelectBackward0>)
0 		 1 		  Q(s,a)=  tensor(1.1072, dtype=torch.float64, grad_fn=<SelectBackward0>)
0 		 2 		  Q(s,a)=  tensor(3.7676, dtype=torch.float64, grad_fn=<SelectBackward0>)
0 		 3 		  Q(s,a)=  tensor(1.7882, dtype=torch.float64, grad_fn=<SelectBackward0>)
0 		 4 		  Q(s,a)=  tensor(1.4203, dtype=torch.float64, grad_fn=<SelectBackward0>)
1 		 0 		  Q(s,a)=  tensor(3.6603, dtype=torch.float64, grad_fn=<SelectBackward0>)
1 		 1 		  Q(s,a)=  tensor(1.7709, dtype=torch.float64, grad_fn=<SelectBackward0>)
1 		 2 		  Q(s,a)=  tensor(3.1778, dtype=torch.float64, grad_fn=<SelectBackward0>)
1 		 3 		  Q(s,a)=  tensor(1.9001, dtype=torch.float64, grad_fn=<SelectBackward0>)
1 		 4 		  Q(s,a)=  tensor(1.0967, dtype=torch.float64, grad_fn=<SelectBackward0>)
2 		 0 		  Q(s,a)=  tensor(3.3834, dtype=torch.float64, grad_fn=<SelectBackward0>)
2 		 1 		  Q(s,a)=  tensor(3.7542, dtype=torch.float64, grad_fn=<SelectBackward0>)
2 		 2 		  Q(s,a)=  tensor(3.2147, dtype=torch.float64, grad_fn=<SelectBackward0>)
2 		 3 		  Q(s,a)=  tensor(2.6569, dtype=torch.float64, grad_fn=<SelectBackward0>)
2 		 4 		  Q(s,a)=  tensor(1.1625, dtype=torch.float64, grad_fn=<SelectBackward0>)
3 		 0 		  Q(s,a)=  tensor(4.3093, dtype=torch.float64, grad_fn=<SelectBackward0>)
3 		 1 		  Q(s,a)=  tensor(3.5687, dtype=torch.float64, grad_fn=<SelectBackward0>)
3 		 2 		  Q(s,a)=  tensor(2.8237, dtype=torch.float64, grad_fn=<SelectBackward0>)
3 		 3 		  Q(s,a)=  tensor(2.3737, dtype=torch.float64, grad_fn=<SelectBackward0>)
3 		 4 		  Q(s,a)=  tensor(0.7852, dtype=torch.float64, grad_fn=<SelectBackward0>)
==============================================

Best trajectory: 
Best trajectory from Test Environment
State:  0.09976470588235296  Action:  2  Reward Received:  0
State:  0.8622745098039216  Action:  1  Reward Received:  2.0
State:  0.47952941176470587  Action:  0  Reward Received:  0.1
State:  0.09976470588235296  Action:  2  Reward Received:  0
State:  0.8622745098039216  Action:  1  Reward Received:  2.0

Total Reward Received:  4.1
Taking a look at model parameters to see if weights are changing
Parameter containing:
tensor([[-0.0696,  0.0434, -0.0745,  0.1896,  0.5321,  0.2809,  0.1938,  0.4539,
          0.5709, -0.5482, -0.3797,  0.1596,  0.6867,  0.1828,  0.4617, -0.2549,
         -0.4201, -0.5669,  0.2026, -0.2520, -0.5499, -0.4532, -0.0866,  0.5143,
          0.4375],
        [ 0.7814, -0.0288,  1.1125,  0.2087, -0.1424, -0.2671, -0.7445, -0.3658,
         -0.7400,  0.7335, -0.5408,  0.1330, -0.5566, -0.0625, -0.4259, -0.3584,
          0.5783,  0.7711,  0.2645, -0.0414,  1.2034,  0.3840,  0.9356, -0.0702,
         -0.1239],
        [-0.2336, -0.0764,  0.5774,  0.3699,  0.0651,  0.4130, -0.0092, -0.3396,
          0.1357,  0.4379, -0.5951, -0.4118,  0.1166, -0.1795,  0.0206, -0.5183,
         -0.6086, -0.6594,  0.4342,  0.1699,  0.6545, -0.7920,  0.7707,  0.3898,
         -0.2309],
        [ 0.3130, -0.0337,  0.7428,  0.2538, -0.0873, -0.2033, -0.3764, -0.3276,
         -0.3099,  0.3104, -0.5169,  0.0328, -0.2113, -0.0507, -0.2524, -0.1774,
          0.0908,  0.1766,  0.2212,  0.1000,  0.4000, -0.0676,  0.6289,  0.0460,
          0.1917],
        [ 0.0508, -0.1204,  0.3630,  0.2133,  0.0014,  0.0536, -0.1917, -0.0813,
         -0.0620,  0.0128, -0.1324, -0.4163, -0.1722,  0.0190, -0.1202, -0.0594,
         -0.2486, -0.0974,  0.1077,  0.0780,  0.3588, -0.0643,  0.3363,  0.0446,
         -0.1611]], dtype=torch.float64, requires_grad=True)
Parameter containing:
tensor([2.6126, 0.7617, 3.2122, 1.5438, 1.2838], dtype=torch.float64,
       requires_grad=True)
